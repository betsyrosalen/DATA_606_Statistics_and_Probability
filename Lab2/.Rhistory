# This works on the original list but only for a first name or middle name that is an initial not if it's two full names
str_detect(name, " \\w{1}\\.")
# So why doesn't this work on the rearranged list?
str_detect(first_last, "\\b\\w{1}\\. ")
# And why doesn't this work to capture both initials and full second names?
str_detect(first_last, "\\w{1}\\. |\\w+\\s\\w+\\s\\w+")
str_extract_all(first_last, "\\w+\\ {2,}")
# This works on the original list but only for a first name or middle name that is an initial not if it's two full names
str_detect(name, " \\w{1}\\.")
# So why doesn't this work on the rearranged list?
str_detect(first_last, "\\b\\w{1}\\. ")
# And why doesn't this work to capture both initials and full second names?
str_detect(first_last, "\\b\\w{1}\\. |\\w+\\s\\w+\\s\\w+")
str_extract_all(first_last, "\\w+\\ {2,}")
# This works on the original list but only for a first name or middle name that is an initial not if it's two full names
str_detect(name, " \\w{1}\\.")
# So why doesn't this work on the rearranged list?
str_detect(first_last, "\\b\\w{1}\\. ")
# And why doesn't this work to capture both initials and full second names?
str_detect(first_last, "\\b\\w{1}\\. |\\w+\\s\\w+\\s\\w+")
str_extract_all(first_last, "\\b\\w{1}\\. ")
# This works on the original list but only for a first name or middle name that is an initial not if it's two full names
str_detect(name, " \\w{1}\\.")
# So why doesn't this work on the rearranged list?
str_detect(first_last, "\\b\\w{1}\\. ")
# And why doesn't this work to capture both initials and full second names?
str_detect(first_last, "\\b\\w{1}\\. |\\w+\\s\\w+\\s\\w+")
str_extract_all(first_last, "[\\b\\w]{1}\\. ")
# This works on the original list but only for a first name or middle name that is an initial not if it's two full names
str_detect(name, " \\w{1}\\.")
# So why doesn't this work on the rearranged list?
str_detect(first_last, "\\b\\w{1}\\. ")
# And why doesn't this work to capture both initials and full second names?
str_detect(first_last, "\\b\\w{1}\\. |\\w+\\s\\w+\\s\\w+")
str_extract_all(first_last, "\\b\\w{1}\\.")
# This works on the original list but only for a first name or middle name that is an initial not if it's two full names
str_detect(name, " \\w{1}\\.")
# So why doesn't this work on the rearranged list?
str_detect(first_last, "\\b\\w{1}\\. ")
# And why doesn't this work to capture both initials and full second names?
str_detect(name, " \\w{1}\\.|\\w+\\s\\w+\\s\\w+")
str_extract_all(first_last, "\\b\\w{1}\\.")
# This works on the original list but only for a first name or middle name that is an initial not if it's two full names
str_detect(name, " \\w{1}\\.")
# This works to capture both initials and full second names
str_detect(name, " \\w{1}\\.|\\w+\\s\\w+\\s\\w+")
# So why doesn't this work on the rearranged list?
str_detect(first_last, "\\b\\w{1}\\. ")
# And why doesn't this work to capture both initials and full second names?
str_detect(name, "\\b\\w{1}\\. |\\w+\\s\\w+\\s\\w+")
str_extract_all(first_last, "\\b\\w{1}\\.")
# This works on the original list but only for a first name or middle name that is an initial not if it's two full names
str_detect(name, " \\w{1}\\.")
# This works to capture both initials and full second names
str_detect(name, " \\w{1}\\.|\\w+\\s\\w+\\s\\w+")
# So why doesn't this work on the rearranged list?
str_detect(first_last, "\\b\\w{1}\\. ")
# And why doesn't this work to capture both initials and full second names?
str_detect(first_last, "\\b\\w{1}\\. |\\w+\\s\\w+\\s\\w+")
str_extract_all(first_last, "\\b\\w{1}\\.")
# Add some extra names for testing...
name <- c("Moe Ed Szyslak", "Burns, C. Montgomery", "Rev. Timothy Lovejoy", "Ned T. Flanders", "Simpson, Homer", "Dr. Julius Hibbert")
# This works on the original list but only for a first name or middle name that is an initial not if it's two full names
str_detect(name, " \\w{1}\\.")
# This works to capture both initials and full second names
str_detect(name, " \\w{1}\\.|\\w+\\s\\w+\\s\\w+")
# So why doesn't this work on the rearranged list?
str_detect(first_last, "\\b\\w{1}\\. ")
# And why doesn't this work to capture both initials and full second names?
str_detect(first_last, "\\b\\w{1}\\. |\\w+\\s\\w+\\s\\w+")
str_extract_all(first_last, "\\b\\w{1}\\.")
knitr::opts_chunk$set(echo = TRUE)
library(stringr)
name <- c("Moe Szyslak", "Burns, C. Montgomery", "Rev. Timothy Lovejoy", "Ned Flanders", "Simpson, Homer", "Dr. Julius Hibbert")
name
str_replace(name, "([^[,]]+),\\s(.+)","\\2 \\1")
first_last <- str_detect(name, "[[:alpha:]]{2,}\\.")
first_last
# Add some extra names for testing...
name <- c("Moe Ed Szyslak", "Burns, C. Montgomery", "Rev. Timothy Lovejoy", "Ned T. Flanders", "Simpson, Homer", "Dr. Julius Hibbert")
# This works on the original list but only for a first name or middle name that is an initial not if it's two full names
str_detect(name, " \\w{1}\\.")
# This works to capture both initials and full second names
str_detect(name, " \\w{1}\\.|\\w+\\s\\w+\\s\\w+")
# So why doesn't this work on the rearranged list?
str_detect(first_last, "\\b\\w{1}\\. ")
# And why doesn't this work to capture both initials and full second names?
str_detect(first_last, "\\b\\w{1}\\. |\\w+\\s\\w+\\s\\w+")
str_extract_all(first_last, "\\b\\w{1}\\.")
# Add some extra names for testing...
name <- c("Moe Ed Szyslak", "Burns, C. Montgomery", "Rev. Timothy Lovejoy", "Ned T. Flanders", "Simpson, Homer", "Dr. Julius Hibbert")
first_last <- str_detect(name, "[[:alpha:]]{2,}\\.")
# This works on the original list but only for a first name or middle name that is an initial not if it's two full names
str_detect(name, " \\w{1}\\.")
# This works to capture both initials and full second names
str_detect(name, " \\w{1}\\.|\\w+\\s\\w+\\s\\w+")
# So why doesn't this work on the rearranged list?
str_detect(first_last, "\\b\\w{1}\\. ")
# And why doesn't this work to capture both initials and full second names?
str_detect(first_last, "\\b\\w{1}\\. |\\w+\\s\\w+\\s\\w+")
str_extract_all(first_last, "\\b\\w{1}\\.")
knitr::opts_chunk$set(echo = TRUE)
library(stringr)
name <- c("Moe Szyslak", "Burns, C. Montgomery", "Rev. Timothy Lovejoy", "Ned Flanders", "Simpson, Homer", "Dr. Julius Hibbert")
name
str_replace(name, "([^[,]]+),\\s(.+)","\\2 \\1")
first_last <- str_detect(name, "[[:alpha:]]{2,}\\.")
first_last
# Add some extra names for testing...
name <- c("Moe Ed Szyslak", "Burns, C. Montgomery", "Rev. Timothy Lovejoy", "Ned T. Flanders", "Simpson, Homer", "Dr. Julius Hibbert")
first_last <- str_detect(name, "[[:alpha:]]{2,}\\.")
# This works on the original list but only for a first name or middle name that is an initial not if it's two full names
str_detect(name, " \\w{1}\\.")
# This works to capture both initials and full second names
str_detect(name, " \\w{1}\\.|\\w+\\s\\w+\\s\\w+")
# So why doesn't this work on the rearranged list?
str_detect(first_last, "\\b\\w{1}\\. ")
# And why doesn't this work to capture both initials and full second names?
str_detect(first_last, "\\b\\w{1}\\. |\\w+\\s\\w+\\s\\w+")
str_extract_all(first_last, "\\b\\w{1}\\.")
# Add some extra names for testing...
name <- c("Moe Ed Szyslak", "Burns, C. Montgomery", "Rev. Timothy Lovejoy", "Ned T. Flanders", "Simpson, Homer", "Dr. Julius Hibbert")
first_last <- str_detect(name, "[[:alpha:]]{2,}\\.")
# This works on the original list but only for a first name or middle name that is an initial not if it's two full names
str_detect(name, " \\w{1}\\.")
# This works to capture both initials and full second names
str_detect(name, " \\w{1}\\.|\\w+\\s\\w+\\s\\w+")
# So why doesn't this work on the rearranged list?
str_detect(first_last, "\\b\\w{1}\\.\\b")
# And why doesn't this work to capture both initials and full second names?
str_detect(first_last, "\\b\\w{1}\\.\\b|\\w+\\s\\w+\\s\\w+")
str_extract_all(first_last, "\\b\\w{1}\\.")
# Add some extra names for testing...
name <- c("Moe Ed Szyslak", "Burns, C. Montgomery", "Rev. Timothy Lovejoy", "Ned T. Flanders", "Simpson, Homer", "Dr. Julius Hibbert")
first_last <- str_detect(name, "[[:alpha:]]{2,}\\.")
# This works on the original list but only for a first name or middle name that is an initial not if it's two full names
str_detect(name, " \\w{1}\\.")
# This works to capture both initials and full second names
str_detect(name, " \\w{1}\\.|\\w+\\s{\\w+\\s{2}\\w+")
# Add some extra names for testing...
name <- c("Moe Ed Szyslak", "Burns, C. Montgomery", "Rev. Timothy Lovejoy", "Ned T. Flanders", "Simpson, Homer", "Dr. Julius Hibbert")
first_last <- str_detect(name, "[[:alpha:]]{2,}\\.")
# This works on the original list but only for a first name or middle name that is an initial not if it's two full names
str_detect(name, " \\w{1}\\.")
# This works to capture both initials and full second names
str_detect(name, " \\w{1}\\.|\\w+\\s{2}\\w+")
# So why doesn't this work on the rearranged list?
str_detect(first_last, "\\b\\w{1}\\. ")
# And why doesn't this work to capture both initials and full second names?
str_detect(first_last, "\\b\\w{1}\\. |\\w+\\s\\w+\\s\\w+")
str_extract_all(first_last, "\\b\\w{1}\\.")
# Add some extra names for testing...
name <- c("Moe Ed Szyslak", "Burns, C. Montgomery", "Rev. Timothy Lovejoy", "Ned T. Flanders", "Simpson, Homer", "Dr. Julius Hibbert")
name
first_last <- str_detect(name, "[[:alpha:]]{2,}\\.")
first_last
# This works on the original list but only for a first name or middle name that is an initial not if it's two full names
str_detect(name, " \\w{1}\\.")
# This works to capture both initials and full second names
str_detect(name, " \\w{1}\\.|\\w+\\s{2}\\w+")
# So why doesn't this work on the rearranged list?
str_detect(first_last, "\\b\\w{1}\\. ")
# And why doesn't this work to capture both initials and full second names?
str_detect(first_last, "\\b\\w{1}\\. |\\w+\\s\\w+\\s\\w+")
str_extract_all(first_last, "\\b\\w{1}\\.")
# Add some extra names for testing...
name <- c("Moe Ed Szyslak", "Burns, C. Montgomery", "Rev. Timothy Lovejoy", "Ned T. Flanders", "Simpson, Homer", "Dr. Julius Hibbert")
name
first_last <- str_detect(name, "[[:alpha:]]{2,}\\.")
first_last
# This works on the original list but only for a first name or middle name that is an initial not if it's two full names
str_detect(name, " \\w{1}\\.")
# This works to capture both initials and full second names
str_detect(name, " \\w{1}\\.|\\w+\\s{2}\\w+")
# So why doesn't this work on the rearranged list?
str_detect(first_last, "\\b\\w{1}\\. ")
# And why doesn't this work to capture both initials and full second names?
str_detect(first_last, "\\b\\w{1}\\. |\\w+\\s\\w+\\s\\w+")
str_extract_all(first_last, "\\b\\w{1}\\.")
# Add some extra names for testing...
name <- c("Moe Ed Szyslak", "Burns, C. Montgomery", "Rev. Timothy Lovejoy", "Ned T. Flanders", "Simpson, Homer", "Dr. Julius Hibbert")
name
first_last <- str_replace(name, "([^[,]]+),\\s(.+)","\\2 \\1")
first_last
# This works on the original list but only for a first name or middle name that is an initial not if it's two full names
str_detect(name, " \\w{1}\\.")
# This works to capture both initials and full second names
str_detect(name, " \\w{1}\\.|\\w+\\s{2}\\w+")
# So why doesn't this work on the rearranged list?
str_detect(first_last, "\\b\\w{1}\\. ")
# And why doesn't this work to capture both initials and full second names?
str_detect(first_last, "\\b\\w{1}\\. |\\w+\\s\\w+\\s\\w+")
str_extract_all(first_last, "\\b\\w{1}\\.")
# Add some extra names for testing...
name <- c("Moe Ed Szyslak", "Burns, C. Montgomery", "Rev. Timothy Lovejoy", "Ned T. Flanders", "Simpson, Homer", "Dr. Julius Hibbert")
name
first_last <- str_replace(name, "([^[,]]+),\\s(.+)","\\2 \\1")
first_last
# This works on the original list but only for a first name or middle name that is an initial not if it's two full names
str_detect(name, " \\w{1}\\.")
# This works to capture both initials and full second names
str_detect(name, " \\w{1}\\.|\\w+\\s\\w+\\s\\w+")
# So why doesn't this work on the rearranged list?
str_detect(first_last, "\\b\\w{1}\\. ")
# And why doesn't this work to capture both initials and full second names?
str_detect(first_last, "\\b\\w{1}\\. |\\w+\\s\\w+\\s\\w+")
str_extract_all(first_last, "\\b\\w{1}\\.")
# Add some extra names for testing...
name <- c("Moe Ed Szyslak", "Burns, C. Montgomery", "Rev. Timothy Lovejoy", "Ned T. Flanders", "Simpson, Homer", "Dr. Julius Hibbert")
name
first_last <- str_replace(name, "([^[,]]+),\\s(.+)","\\2 \\1")
first_last
# This works on the original list but only for a first name or middle name that is an initial not if it's two full names
str_detect(name, " \\w{1}\\.")
# This works to capture both initials and full second names
str_detect(name, " \\w{1}\\.|\\w+\\s\\w+\\s\\w+")
str_detect(name, " \\w{1}\\.|(\\w+\\s){2}\\w+")
# So why doesn't this work on the rearranged list?
str_detect(first_last, "\\b\\w{1}\\. ")
# And why doesn't this work to capture both initials and full second names?
str_detect(first_last, "\\b\\w{1}\\. |\\w+\\s\\w+\\s\\w+")
str_extract_all(first_last, "\\b\\w{1}\\.")
# Add some extra names for testing...
name <- c("Moe Ed Szyslak", "Burns, C. Montgomery", "Rev. Timothy Andrew Lovejoy", "Ned T. Flanders", "Simpson, Homer", "Dr. Julius Hibbert")
name
# This works on the original list but only for a first name or middle name that is an initial not if it's two full names
str_detect(name, " \\w{1}\\.")
# This works to capture both initials and full second names
str_detect(name, " \\w{1}\\.|(\\w+\\s){2}\\w+")
first_last <- str_replace(name, "([^[,]]+),\\s(.+)","\\2 \\1")
first_last
# This works to on the rearranged list
str_detect(first_last, "\\b\\w{1}\\. |(\\w+\\s){2}\\w+")
x <- "23543$"
str_view_all(x, "[0-9]+\\$")
x <- "23543$"
str_extract_all(x, "[0-9]+\\$")
x <- c("$4343", "23543$")
str_extract_all(x, "[0-9]+\\$")
x <- c("$4343", "23543$")
str_view_all(x, "[0-9]+\\$")
install.packages("htmlwidgets")
x <- c("$4343", "23543$")
str_view_all(x, "[0-9]+\\$")
x <- c("Betsy", "a", "betsy", "bananas")
str_view_all(x, "\\b[a-z]{1,4}\\b")
x <- c("Betsy", "a", "bets", "bananas")
str_view_all(x, "\\b[a-z]{1,4}\\b")
x <- c("$4343", "23543$", "23,543$")
str_view_all(x, "[0-9]+\\$")
x <- c("testfile.txt", "testfile.csv")
str_view_all(x, ".*?\\.txt$")
x <- c("testfile.txt", "testfile.csv", ".txt")
str_view_all(x, ".*?\\.txt$")
x <- c("testfile.txt", "testfile.csv", ".txt", "file.txttt")
str_view_all(x, ".*?\\.txt$")
x <- c("04/19/1972", "25/07/1993", "4/19/1972")
str_view_all(x, "\\d{2}/\\d{2}/\\d{4}")
x <- c("", "")
str_view_all(x, "<(.+?)>.+?</\\1>")
x <- c("<strong>Hello World!</strong>", "")
str_view_all(x, "<(.+?)>.+?</\\1>")
x <- c("\<strong\>Hello World!\</strong\>", "")
x <- c("<strong>Hello World!</strong>", "")
str_view_all(x, "<(.+?)>.+?</\\1>")
x <- c("<strong>Hello World!</strong>", '<a href="https://www.google.com">Google</a>')
str_view_all(x, "<(.+?)>.+?</\\1>")
x <- c("'<strong>'Hello World!'</strong>'", '<a href="https://www.google.com">Google</a>')
str_view_all(x, "<(.+?)>.+?</\\1>")
x <- c("<strong>Hello World!</strong>", '<a href="https://www.google.com">Google</a>')
str_view_all(x, "<(.+?)>.+?</\\1>")
x <- c("<strong>Hello World!</strong>", '<a href="https://www.google.com">Google</a>')
str_view_all(x, as.character("<(.+?)>.+?</\\1>"))
x <- c("<strong>Hello World!</strong>", '<a href="https://www.google.com">Google</a>')
as.character(str_view_all(x, "<(.+?)>.+?</\\1>"))
x <- c("<strong>Hello World!</strong>", '<a href="https://www.google.com">Google</a>')
str_view_all(x, "<(.+?)>.+?</\\1>")
x <- c("<strong>Hello World!</strong>", '<a href="https://www.google.com">Google</a>')
str_view_all(x, "<(.+?)>.+?</\\1>")
x <- c("<strong>Hello World!</strong>", '<a href="https://www.google.com">Google</a>')
str_view_all(x, "<(.+?)>.+?</\\1>")
x <- c("<strong>Hello World!</strong>", '<a href="https://www.google.com">Google</a>')
str_view_all(x, "<(.+?)>.+?</\\1>")
x <- c("<strong>Hello World!</strong>", '<a href="https://www.google.com">Google</a>')
str_view_all(x, "<(.+?)>.+?</\\1>")
x <- c("<strong>Hello World!</strong>", '<a href="https://www.google.com">Google</a>', "<strong>Hello <em>World!</em></strong>")
str_view_all(x, "<(.+?)>.+?</\\1>")
# Can't figure out how to get it to show the HTML tags in the output.  Sorry!
x <- c("<strong>Hello World!</strong>", '<a href="https://www.google.com">Google</a>', "<strong>Hello</strong> <em>World!</em>")
str_view_all(x, "<(.+?)>.+?</\\1>")
# Can't figure out how to get it to show the HTML tags in the output.  Sorry!
x <- c("<strong>Hello World!</strong>", '<a href="https://www.google.com">Google</a>', "<strong>Hello</strong> <em>World!</em>", "<em>overlapping<strong> tags</em>?</strong>")
str_view_all(x, "<(.+?)>.+?</\\1>")
# Can't figure out how to get it to show the HTML tags in the output.  Sorry!
x <- c("<strong>Hello World!</strong>", '<a href="https://www.google.com">Google</a>', "<strong>Hello</strong> <em>World!</em>", "<em>overlapping<strong> tags</em>? Ignore the nested one.</strong>")
str_view_all(x, "<(.+?)>.+?</\\1>")
# Can't figure out how to get it to show the HTML tags in the output.  Sorry!
x <- c("<strong>Hello World!</strong>", '<a href="https://www.google.com">Google</a>', "<strong>Hello</strong> <em>World!</em>", "<em>overlapping<strong> tags</em>? Nested tag gets ignored.</strong>")
str_view_all(x, "<(.+?)>.+?</\\1>")
# Can't figure out how to get it to show the HTML tags in the output.  Sorry!
x <- c("<strong>Hello World!</strong>",
'<a href="https://www.google.com">Google</a>',
"<strong>Hello</strong> <em>World!</em>",
"<em>overlapping<strong> tags</em>? Nested tag gets ignored.</strong>")
# Can't figure out how to get it to show the HTML tags in the output.  Sorry!
str_view_all(x, "<(.+?)>.+?</\\1>")
x <- "clcopCow1zmstc0d87wnkig7OvdicpNuggvhryn92Gjuwczi8hqrfpRxs5Aj5dwpn0TanwoUwisdij7Lj8kpf03AT5Idr3coc0bt7yczjatOaootj55t3Nj3ne6c4Sfek.r1w1YwwojigOd6vrfUrbz2.2bkAnbhzgv4R9i05zEcrop.wAgnb.SqoU65fPa1otfb7wEm24k6t3sR9zqe5fy89n6Nd5t9kc4fE905gmc4Rgxo5nhDk!gr"
str_extract_all([[:upper:]])
x <- "clcopCow1zmstc0d87wnkig7OvdicpNuggvhryn92Gjuwczi8hqrfpRxs5Aj5dwpn0TanwoUwisdij7Lj8kpf03AT5Idr3coc0bt7yczjatOaootj55t3Nj3ne6c4Sfek.r1w1YwwojigOd6vrfUrbz2.2bkAnbhzgv4R9i05zEcrop.wAgnb.SqoU65fPa1otfb7wEm24k6t3sR9zqe5fy89n6Nd5t9kc4fE905gmc4Rgxo5nhDk!gr"
str_extract_all(x, "[[:upper:]]"")
x <- "clcopCow1zmstc0d87wnkig7OvdicpNuggvhryn92Gjuwczi8hqrfpRxs5Aj5dwpn0TanwoUwisdij7Lj8kpf03AT5Idr3coc0bt7yczjatOaootj55t3Nj3ne6c4Sfek.r1w1YwwojigOd6vrfUrbz2.2bkAnbhzgv4R9i05zEcrop.wAgnb.SqoU65fPa1otfb7wEm24k6t3sR9zqe5fy89n6Nd5t9kc4fE905gmc4Rgxo5nhDk!gr"
str_extract_all(x, "[[:upper:]]")
x <- "clcopCow1zmstc0d87wnkig7OvdicpNuggvhryn92Gjuwczi8hqrfpRxs5Aj5dwpn0TanwoUwisdij7Lj8kpf03AT5Idr3coc0bt7yczjatOaootj55t3Nj3ne6c4Sfek.r1w1YwwojigOd6vrfUrbz2.2bkAnbhzgv4R9i05zEcrop.wAgnb.SqoU65fPa1otfb7wEm24k6t3sR9zqe5fy89n6Nd5t9kc4fE905gmc4Rgxo5nhDk!gr"
str_extract_all(x, "[[:upper:][:punct:]]")
x <- "clcopCow1zmstc0d87wnkig7OvdicpNuggvhryn92Gjuwczi8hqrfpRxs5Aj5dwpn0TanwoUwisdij7Lj8kpf03AT5Idr3coc0bt7yczjatOaootj55t3Nj3ne6c4Sfek.r1w1YwwojigOd6vrfUrbz2.2bkAnbhzgv4R9i05zEcrop.wAgnb.SqoU65fPa1otfb7wEm24k6t3sR9zqe5fy89n6Nd5t9kc4fE905gmc4Rgxo5nhDk!gr"
str_collapse(str_extract_all(x, "[[:upper:][:punct:] ]"))
x <- "clcopCow1zmstc0d87wnkig7OvdicpNuggvhryn92Gjuwczi8hqrfpRxs5Aj5dwpn0TanwoUwisdij7Lj8kpf03AT5Idr3coc0bt7yczjatOaootj55t3Nj3ne6c4Sfek.r1w1YwwojigOd6vrfUrbz2.2bkAnbhzgv4R9i05zEcrop.wAgnb.SqoU65fPa1otfb7wEm24k6t3sR9zqe5fy89n6Nd5t9kc4fE905gmc4Rgxo5nhDk!gr"
paste(str_extract_all(x, "[[:upper:][:punct:] ]"), collapse = "")
x <- "clcopCow1zmstc0d87wnkig7OvdicpNuggvhryn92Gjuwczi8hqrfpRxs5Aj5dwpn0TanwoUwisdij7Lj8kpf03AT5Idr3coc0bt7yczjatOaootj55t3Nj3ne6c4Sfek.r1w1YwwojigOd6vrfUrbz2.2bkAnbhzgv4R9i05zEcrop.wAgnb.SqoU65fPa1otfb7wEm24k6t3sR9zqe5fy89n6Nd5t9kc4fE905gmc4Rgxo5nhDk!gr"
toString(str_extract_all(x, "[[:upper:][:punct:] ]"))
x <- "clcopCow1zmstc0d87wnkig7OvdicpNuggvhryn92Gjuwczi8hqrfpRxs5Aj5dwpn0TanwoUwisdij7Lj8kpf03AT5Idr3coc0bt7yczjatOaootj55t3Nj3ne6c4Sfek.r1w1YwwojigOd6vrfUrbz2.2bkAnbhzgv4R9i05zEcrop.wAgnb.SqoU65fPa1otfb7wEm24k6t3sR9zqe5fy89n6Nd5t9kc4fE905gmc4Rgxo5nhDk!gr"
toString(str_extract_all(x, "[[:upper:][:punct:] ]"))
x <- "clcopCow1zmstc0d87wnkig7OvdicpNuggvhryn92Gjuwczi8hqrfpRxs5Aj5dwpn0TanwoUwisdij7Lj8kpf03AT5Idr3coc0bt7yczjatOaootj55t3Nj3ne6c4Sfek.r1w1YwwojigOd6vrfUrbz2.2bkAnbhzgv4R9i05zEcrop.wAgnb.SqoU65fPa1otfb7wEm24k6t3sR9zqe5fy89n6Nd5t9kc4fE905gmc4Rgxo5nhDk!gr"
message <- str_extract_all(x, "[[:upper:][:punct:] ]")
toString(message)
x <- "clcopCow1zmstc0d87wnkig7OvdicpNuggvhryn92Gjuwczi8hqrfpRxs5Aj5dwpn0TanwoUwisdij7Lj8kpf03AT5Idr3coc0bt7yczjatOaootj55t3Nj3ne6c4Sfek.r1w1YwwojigOd6vrfUrbz2.2bkAnbhzgv4R9i05zEcrop.wAgnb.SqoU65fPa1otfb7wEm24k6t3sR9zqe5fy89n6Nd5t9kc4fE905gmc4Rgxo5nhDk!gr"
message <- str_extract_all(x, "[[:upper:][:punct:] ]")
message <- toString(message)
message
x <- "clcopCow1zmstc0d87wnkig7OvdicpNuggvhryn92Gjuwczi8hqrfpRxs5Aj5dwpn0TanwoUwisdij7Lj8kpf03AT5Idr3coc0bt7yczjatOaootj55t3Nj3ne6c4Sfek.r1w1YwwojigOd6vrfUrbz2.2bkAnbhzgv4R9i05zEcrop.wAgnb.SqoU65fPa1otfb7wEm24k6t3sR9zqe5fy89n6Nd5t9kc4fE905gmc4Rgxo5nhDk!gr"
message <- str_extract_all(x, "[[:upper:][:punct:] ]")
message <- paste(message, collapse = "")
message
x <- "clcopCow1zmstc0d87wnkig7OvdicpNuggvhryn92Gjuwczi8hqrfpRxs5Aj5dwpn0TanwoUwisdij7Lj8kpf03AT5Idr3coc0bt7yczjatOaootj55t3Nj3ne6c4Sfek.r1w1YwwojigOd6vrfUrbz2.2bkAnbhzgv4R9i05zEcrop.wAgnb.SqoU65fPa1otfb7wEm24k6t3sR9zqe5fy89n6Nd5t9kc4fE905gmc4Rgxo5nhDk!gr"
message <- str_extract_all(x, "[[:upper:][:punct:] ]")
message <- cat(message)
x <- "clcopCow1zmstc0d87wnkig7OvdicpNuggvhryn92Gjuwczi8hqrfpRxs5Aj5dwpn0TanwoUwisdij7Lj8kpf03AT5Idr3coc0bt7yczjatOaootj55t3Nj3ne6c4Sfek.r1w1YwwojigOd6vrfUrbz2.2bkAnbhzgv4R9i05zEcrop.wAgnb.SqoU65fPa1otfb7wEm24k6t3sR9zqe5fy89n6Nd5t9kc4fE905gmc4Rgxo5nhDk!gr"
message <- str_extract_all(x, "[[:upper:][:punct:] ]")
message <- str_c(message)
message
x <- "clcopCow1zmstc0d87wnkig7OvdicpNuggvhryn92Gjuwczi8hqrfpRxs5Aj5dwpn0TanwoUwisdij7Lj8kpf03AT5Idr3coc0bt7yczjatOaootj55t3Nj3ne6c4Sfek.r1w1YwwojigOd6vrfUrbz2.2bkAnbhzgv4R9i05zEcrop.wAgnb.SqoU65fPa1otfb7wEm24k6t3sR9zqe5fy89n6Nd5t9kc4fE905gmc4Rgxo5nhDk!gr"
message <- str_extract_all(x, "[[:upper:][:punct:] ]")
message
message <- str_c(message)
message
x <- "clcopCow1zmstc0d87wnkig7OvdicpNuggvhryn92Gjuwczi8hqrfpRxs5Aj5dwpn0TanwoUwisdij7Lj8kpf03AT5Idr3coc0bt7yczjatOaootj55t3Nj3ne6c4Sfek.r1w1YwwojigOd6vrfUrbz2.2bkAnbhzgv4R9i05zEcrop.wAgnb.SqoU65fPa1otfb7wEm24k6t3sR9zqe5fy89n6Nd5t9kc4fE905gmc4Rgxo5nhDk!gr"
message <- unlist(str_extract_all(x, "[[:upper:][:punct:] ]"))
message
message <- str_c(message)
message
x <- "clcopCow1zmstc0d87wnkig7OvdicpNuggvhryn92Gjuwczi8hqrfpRxs5Aj5dwpn0TanwoUwisdij7Lj8kpf03AT5Idr3coc0bt7yczjatOaootj55t3Nj3ne6c4Sfek.r1w1YwwojigOd6vrfUrbz2.2bkAnbhzgv4R9i05zEcrop.wAgnb.SqoU65fPa1otfb7wEm24k6t3sR9zqe5fy89n6Nd5t9kc4fE905gmc4Rgxo5nhDk!gr"
message <- unlist(str_extract_all(x, "[[:upper:][:punct:] ]"))
message
message <- cat(message)
message
x <- "clcopCow1zmstc0d87wnkig7OvdicpNuggvhryn92Gjuwczi8hqrfpRxs5Aj5dwpn0TanwoUwisdij7Lj8kpf03AT5Idr3coc0bt7yczjatOaootj55t3Nj3ne6c4Sfek.r1w1YwwojigOd6vrfUrbz2.2bkAnbhzgv4R9i05zEcrop.wAgnb.SqoU65fPa1otfb7wEm24k6t3sR9zqe5fy89n6Nd5t9kc4fE905gmc4Rgxo5nhDk!gr"
message <- unlist(str_extract_all(x, "[[:upper:][:punct:] ]"))
message
message <- cat(message, sep = "")
message
x <- "clcopCow1zmstc0d87wnkig7OvdicpNuggvhryn92Gjuwczi8hqrfpRxs5Aj5dwpn0TanwoUwisdij7Lj8kpf03AT5Idr3coc0bt7yczjatOaootj55t3Nj3ne6c4Sfek.r1w1YwwojigOd6vrfUrbz2.2bkAnbhzgv4R9i05zEcrop.wAgnb.SqoU65fPa1otfb7wEm24k6t3sR9zqe5fy89n6Nd5t9kc4fE905gmc4Rgxo5nhDk!gr"
message <- unlist(str_extract_all(x, "[[:upper:][:punct:] ]"))
message
message <- paste(message, collapse = "")
message
x <- "clcopCow1zmstc0d87wnkig7OvdicpNuggvhryn92Gjuwczi8hqrfpRxs5Aj5dwpn0TanwoUwisdij7Lj8kpf03AT5Idr3coc0bt7yczjatOaootj55t3Nj3ne6c4Sfek.r1w1YwwojigOd6vrfUrbz2.2bkAnbhzgv4R9i05zEcrop.wAgnb.SqoU65fPa1otfb7wEm24k6t3sR9zqe5fy89n6Nd5t9kc4fE905gmc4Rgxo5nhDk!gr"
message <- unlist(str_extract_all(x, "[[:upper:][:punct:] ]"))
message
paste(message, collapse = "")
x <- "clcopCow1zmstc0d87wnkig7OvdicpNuggvhryn92Gjuwczi8hqrfpRxs5Aj5dwpn0TanwoUwisdij7Lj8kpf03AT5Idr3coc0bt7yczjatOaootj55t3Nj3ne6c4Sfek.r1w1YwwojigOd6vrfUrbz2.2bkAnbhzgv4R9i05zEcrop.wAgnb.SqoU65fPa1otfb7wEm24k6t3sR9zqe5fy89n6Nd5t9kc4fE905gmc4Rgxo5nhDk!gr"
message <- unlist(str_extract_all(x, "[[:upper:][:punct:] ]"))
paste(message, collapse = "")
x <- "clcopCow1zmstc0d87wnkig7OvdicpNuggvhryn92Gjuwczi8hqrfpRxs5Aj5dwpn0TanwoUwisdij7Lj8kpf03AT5Idr3coc0bt7yczjatOaootj55t3Nj3ne6c4Sfek.r1w1YwwojigOd6vrfUrbz2.2bkAnbhzgv4R9i05zEcrop.wAgnb.SqoU65fPa1otfb7wEm24k6t3sR9zqe5fy89n6Nd5t9kc4fE905gmc4Rgxo5nhDk!gr"
message <- unlist(str_extract_all(x, "[[:upper:][:punct:] ]"))
noqute(message, collapse = "")
x <- "clcopCow1zmstc0d87wnkig7OvdicpNuggvhryn92Gjuwczi8hqrfpRxs5Aj5dwpn0TanwoUwisdij7Lj8kpf03AT5Idr3coc0bt7yczjatOaootj55t3Nj3ne6c4Sfek.r1w1YwwojigOd6vrfUrbz2.2bkAnbhzgv4R9i05zEcrop.wAgnb.SqoU65fPa1otfb7wEm24k6t3sR9zqe5fy89n6Nd5t9kc4fE905gmc4Rgxo5nhDk!gr"
message <- unlist(str_extract_all(x, "[[:upper:][:punct:] ]"))
noquote(message, collapse = "")
x <- "clcopCow1zmstc0d87wnkig7OvdicpNuggvhryn92Gjuwczi8hqrfpRxs5Aj5dwpn0TanwoUwisdij7Lj8kpf03AT5Idr3coc0bt7yczjatOaootj55t3Nj3ne6c4Sfek.r1w1YwwojigOd6vrfUrbz2.2bkAnbhzgv4R9i05zEcrop.wAgnb.SqoU65fPa1otfb7wEm24k6t3sR9zqe5fy89n6Nd5t9kc4fE905gmc4Rgxo5nhDk!gr"
message <- unlist(str_extract_all(x, "[[:upper:][:punct:] ]"))
noquote(message)
x <- "clcopCow1zmstc0d87wnkig7OvdicpNuggvhryn92Gjuwczi8hqrfpRxs5Aj5dwpn0TanwoUwisdij7Lj8kpf03AT5Idr3coc0bt7yczjatOaootj55t3Nj3ne6c4Sfek.r1w1YwwojigOd6vrfUrbz2.2bkAnbhzgv4R9i05zEcrop.wAgnb.SqoU65fPa1otfb7wEm24k6t3sR9zqe5fy89n6Nd5t9kc4fE905gmc4Rgxo5nhDk!gr"
message <- unlist(str_extract_all(x, "[[:upper:][:punct:] ]"))
noquote(paste(message, collapse = ""))
x <- c("<strong>Hello World!</strong>",
'<a href="https://www.google.com">Google</a>',
"<strong>Hello</strong> <em>World</em>!",
"<em>overlapping<strong> tags</em>? Nested tag gets ignored.</strong>")
# Can't figure out how to get it to show the HTML tags in the output.  Sorry!
str_view_all(x, "<(.+?)>.+?</\\1>")
load("more/kobe.RData")
head(kobe)
kobe$basket[1:9]
kobe_streak <- calc_streak(kobe$basket)
barplot(table(kobe_streak))
outcomes <- c("heads", "tails")
sample(outcomes, size = 1, replace = TRUE)
outcomes <- c("heads", "tails")
sample(outcomes, size = 1, replace = TRUE)
outcomes <- c("heads", "tails")
sample(outcomes, size = 1, replace = TRUE)
outcomes <- c("heads", "tails")
sample(outcomes, size = 1, replace = TRUE)
outcomes <- c("heads", "tails")
sample(outcomes, size = 1, replace = TRUE)
sim_fair_coin <- sample(outcomes, size = 100, replace = TRUE)
sim_fair_coin
table(sim_fair_coin)
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
sim_unfair_coin
table(sim_unfair_coin)
sim_unfair_coin
table(sim_unfair_coin)
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 1, replace = TRUE)
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 1, replace = TRUE)
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 1, prob = c(.45, .55) replace = TRUE)
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 1, prob = c(.45, .55), replace = TRUE)
outcomes <- c("H", "M")
samp <- sample(outcomes, size = 1, replace = TRUE)
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 133, prob = c(.45, .55), replace = TRUE)
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 133, prob = c(.45, .55), replace = TRUE)
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 1, replace = TRUE)
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 133, prob = c(.45, .55), replace = TRUE)
kobe$basket
sim_basket
barplot(table(sim_basket))
sim_streak <- calc_streak(sim$basket)
sim_streak <- calc_streak(sim_basket)
barplot(table(sim_streak))
sim_streak <- calc_streak(sim_basket)
barplot(table(sim_streak))
sim_streak <- calc_streak(sim_basket)
barplot(table(sim_streak))
load("more/kobe.RData")
head(kobe)
kobe$basket[1:9]
kobe_streak <- calc_streak(kobe$basket)
barplot(table(kobe_streak))
outcomes <- c("heads", "tails")
sample(outcomes, size = 1, replace = TRUE)
sim_fair_coin <- sample(outcomes, size = 100, replace = TRUE)
sim_fair_coin
table(sim_fair_coin)
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
sim_unfair_coin
table(sim_unfair_coin)
?sample
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 1, replace = TRUE)
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 133, prob = c(.45, .55), replace = TRUE)
kobe$basket
sim_basket
sim_streak <- calc_streak(sim_basket)
barplot(table(sim_streak))
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
knitr::opts_chunk$set(echo = TRUE)
library(openintro)
data(iris)
data(heartTr)
combn(6,2)
factorial(6)
6*6
14.6 - 4.2
14.6 + 20.7 - 4.2
100 - 14.6 - (20.7 - 4.2)
100 - 14.6 - (20.7 - 4.2)
100 - 14.6
(20.7 - 4.2)
100 - 14.6 - (20.7 - 4.2)
4.2/20.7
4.2/20.7
10.4/(100-20.7)
(108 + 114 - 78)/204
78/114
19/54
# probability that a randomly chosen male respondent with brown eyes has a partner with blue eyes
19/54
# probability of a randomly chosen male respondent with green eyes has a partner with blue eyes
11/36
# probability that a randomly chosen male respondent with blue eyes has a partner with blue eyes
78/114
# probability that a randomly chosen male respondent with brown eyes has a partner with brown eyes
23/54
# probability of a randomly chosen male respondent with green eyes has a partner with green eyes
16/36
28/95 * 59/94
72/95 * 28/94
# if the first book was a hardcover fiction book
72/95 * 27/94
# if the first book was a paperback fiction book
72/95 * 28/94
# if the first book was a hardcover fiction book
72/95 * 28/95
2/95
(21.2 + 18.3 + 15.8 + 4.7 + 2.2) * .41
(21.2 + 18.3 + 15.8 + 4.7 + 2.2)
(21.2 + 18.3 + 15.8 + 4.7 + 2.2)
lessthan50k * .41
lessthan50k <- (21.2 + 18.3 + 15.8 + 4.7 + 2.2)
lessthan50k * .41
lessthan50k <- (21.2 + 18.3 + 15.8 + 4.7 + 2.2)
lessthan50k
