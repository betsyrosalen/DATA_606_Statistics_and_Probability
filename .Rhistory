p_hats4 <- rep(0, 5000)
for(i in 1:5000){
samp <- sample(c("atheist", "non_atheist"), n, replace = TRUE, prob = c(p, 1-p))
p_hats4[i] <- sum(samp == "atheist")/n
}
par(mfrow = c(2, 2))
hist(p_hats, main = "p = 0.1, n = 400", xlim = c(0, 0.18))
hist(p_hats2, main = "p = 0.1, n = 400", xlim = c(0, 0.18))
hist(p_hats3, main = "p = 0.02, n = 1040", xlim = c(0, 0.18))
hist(p_hats4, main = "p = 0.02, n = 400", xlim = c(0, 0.18))
par(mfrow = c(1, 1))
par(mfrow = c(2, 2))
hist(p_hats, main = "p = 0.1, n = 1040", xlim = c(0, 0.18))
hist(p_hats2, main = "p = 0.1, n = 400", xlim = c(0, 0.18))
hist(p_hats3, main = "p = 0.02, n = 1040", xlim = c(0, 0.18))
hist(p_hats4, main = "p = 0.02, n = 400", xlim = c(0, 0.18))
par(mfrow = c(1, 1))
# Check expected outcomes
# woods 4.8%
426 * .048
# cultivated grass plots 14.7%
426 * .147
# deciduous forests 39.6%
426 * .396
# Check expected outcomes
# woods 4.8%
w <- round(426 * .048)
# cultivated grass plots 14.7%
cg <- round(426 * .147)
# deciduous forests 39.6%
df <- round(426 * .396)
w
cg
df
# Check expected outcomes
# woods 4.8%
w <- round(426 * .048)
# cultivated grass plots 14.7%
cg <- round(426 * .147)
# deciduous forests 39.6%
df <- round(426 * .396)
# other
o <- round(426 * 1-(.048 + .147 + .396))
w
cg
df
o
# Check expected outcomes
# woods 4.8%
w <- round(426 * .048)
# cultivated grass plots 14.7%
cg <- round(426 * .147)
# deciduous forests 39.6%
df <- round(426 * .396)
# other
o <- round(426 * (1-(.048 + .147 + .396)))
w
cg
df
o
chi <- (4-w)^2/w + (16-cg)^2/cg + (67-df)^2/df + (345-o)^2/o
chi
chi <- (4-w)^2/w + (16-cg)^2/cg + (61-df)^2/df + (345-o)^2/o
chi
chi <- (4-w)^2/w + (16-cg)^2/cg + (61-df)^2/df + (345-o)^2/o
chi
pchisq(chi, 3, lower.tail = FALSE)
options(scipen = 999)
pchisq(chi, 3, lower.tail = FALSE)
options(scipen = 999)
pchisq(chi, 3, lower.tail = TRUE)
options(scipen = 999)
pchisq(chi, 3, lower.tail = FALSE)
# Check expected outcomes
# woods 4.8%
w <- round(426 * .048)
w
# cultivated grass plots 14.7%
cg <- round(426 * .147)
cg
# deciduous forests 39.6%
df <- round(426 * .396)
df
# other
o <- round(426 * (1-(.048 + .147 + .396)))
o
# Women who suffer from depression
do <- 2607/50739
do
# Women who do not suffer from depression
not <- 48132/50739
not
expected <- 6617 * do
expected
expected <- round(6617 * do)
expected
(373 - expected)^2/expected
df <- (2-1) * (5-1)
pchisq(20.93, df, lower.tail = FALSE)
df <- (2-1) * (5-1)
p-val <- pchisq(20.93, df, lower.tail = FALSE)
df <- (2-1) * (5-1)
pval <- pchisq(20.93, df, lower.tail = FALSE)
pval
library(XML)
library(RCurl)
library(jsonlite)
library(DT)
library(miniUI)
install.packages("miniUI")
library(miniUI)
library(shiny)
get_password <- function() {
ui <- miniPage(
gadgetTitleBar("Please enter your password"),
miniContentPanel(
passwordInput("password", "")
)
)
server <- function(input, output) {
observeEvent(input$done, {
stopApp(input$password)
})
observeEvent(input$cancel, {
stopApp(stop("No password.", call. = FALSE))
})
}
runGadget(ui, server, viewer = dialogViewer("Password", height = 200))
}
apiKey <- get_password()
library(miniUI)
library(shiny)
get_password <- function() {
ui <- miniPage(
gadgetTitleBar("Please enter your NY Times API key"),
miniContentPanel(
passwordInput("NY Times API key", "")
)
)
server <- function(input, output) {
observeEvent(input$done, {
stopApp(input$password)
})
observeEvent(input$cancel, {
stopApp(stop("No password.", call. = FALSE))
})
}
runGadget(ui, server, viewer = dialogViewer("Password", height = 200))
}
apiKey <- get_password()
library(miniUI)
library(shiny)
get_password <- function() {
ui <- miniPage(
gadgetTitleBar("Please enter your NY Times API key"),
miniContentPanel(
passwordInput("NY Times API key", "")
)
)
server <- function(input, output) {
observeEvent(input$done, {
stopApp(input$password)
})
observeEvent(input$cancel, {
stopApp(stop("No password.", call. = FALSE))
})
}
runGadget(ui, server, viewer = dialogViewer("Password", height = 200))
}
apiKey <- get_password()
library(miniUI)
library(shiny)
get_password <- function() {
ui <- miniPage(
gadgetTitleBar("Please enter your NY Times API key"),
miniContentPanel(
passwordInput("password", "")
)
)
server <- function(input, output) {
observeEvent(input$done, {
stopApp(input$password)
})
observeEvent(input$cancel, {
stopApp(stop("No password.", call. = FALSE))
})
}
runGadget(ui, server, viewer = dialogViewer("Password", height = 200))
}
apiKey <- get_password()
library(httr)
library(jsonlite)
library(DT)
url <- "https://api.nytimes.com/svc/archive/v1/2016/1.json"
content <- GET(url = url, query = list(key = apiKey))
url <- "https://api.nytimes.com/svc/archive/v1/2016/1.json"
content <- GET(url = url, query = list(key = apiKey, year = 1851, month = 1))
url <- "https://api.nytimes.com/svc/archive/v1/2016/1.json"
content <- GET(url = url, query = list(key = apiKey, year = 1851, month = 1))
http_status(content)
Sys.setenv(nytkey="2d3c197b934b4520bee39d02b871a74d")
Sys.setenv(nytkey="2d3c197b934b4520bee39d02b871a74d")
url <- "https://api.nytimes.com/svc/archive/v1/2016/1.json"
content <- fromJSON(url = url, query = list(key = nytkey, year = 1851, month = 1))
??fromJSON
url <- "https://api.nytimes.com/svc/archive/v1/2016/1.json"
content <- fromJSON(url, query = list(key = nytkey, year = 1851, month = 1))
content <- fromJSON("http://api.nytimes.com/svc/search/v2/articlesearch.json?q=mueller&api-key=nytkey")
content <- fromJSON("http://api.nytimes.com/svc/search/v2/articlesearch.json?q=mueller&api-key=2d3c197b934b4520bee39d02b871a74d")
content <- fromJSON(paste("https://api.nytimes.com/svc/archive/v1/2016/1.json?q=api-key=","nytkey","&year=1851&month=1"))
http_status(content)
content <- fromJSON(paste("https://api.nytimes.com/svc/archive/v1/2016/1.json?q=api-key=",nytkey,"&year=1851&month=1"))
NYTKey <- Sys.getenv("nytkey")
content <- fromJSON(paste("https://api.nytimes.com/svc/archive/v1/2016/1.json?q=api-key=",NYTKey,"&year=1851&month=1"))
url <- "https://api.nytimes.com/svc/archive/v1/2016/1.json"
NYTKey <- Sys.getenv("nytkey")
year <- "1851"
month <- "1"
baseurl <- paste0(url,"&year=",year,"&month=",month,
"&facet_filter=true&api-key=",NYTKey, sep="")
http_status(content)
url <- "https://api.nytimes.com/svc/archive/v1/2016/1.json"
NYTKey <- Sys.getenv("nytkey")
year <- "1851"
month <- "1"
query <- paste0(url,"&year=",year,"&month=",month,
"&facet_filter=true&api-key=",NYTKey, sep="")
content <- fromJSON(query)
url <- "https://api.nytimes.com/svc/archive/v1/2016/1.json"
NYTKey <- Sys.getenv("nytkey")
year <- "1851"
month <- "1"
query <- paste0(url,"&year=",year,"&month=",month,
"&api-key=",NYTKey)
content <- fromJSON(query)
url <- "https://api.nytimes.com/svc/archive/v1/1851/1.json"
NYTKey <- Sys.getenv("nytkey")
query <- paste0(url,"&api-key=",NYTKey)
content <- fromJSON(query)
url <- "https://api.nytimes.com/svc/archive/v1/1851/1.json"
NYTKey <- Sys.getenv("nytkey")
content <- fromJSON(url, NYTKey)
?paste0
url <- "https://api.nytimes.com/svc/archive/v1/1851/1.json"
NYTKey <- Sys.getenv("nytkey")
query <- paste0(url,NYTKey)
content <- fromJSON(query)
url <- "https://api.nytimes.com/svc/archive/v1/1851/1.json"
NYTKey <- Sys.getenv("nytkey")
query <- paste0(url,"&api-key=",NYTKey)
content <- GET(query)
status_code(content)
httr_status(content)
http_status(content)
library(jsonlite)
library(tidyverse)
library(DT)
load("NYTArchive-1872-04.RData")
str(head(content$response$docs))
df <- content$response$docs %>%
select(snippet, lead_paragraph, abstract, print_page, source, headline,
keywords, pub_date, type_of_material, word_count)
# 'headline' was a list of two variables 'main' and 'kicker'
# so I just converted it to contain the main headline
df$headline <- df$headline$main
birthday <- df %>%
filter(grepl("1872-04-19",pub_date))
datatable(birthday)
df <- content$response$docs %>%
select(headline, snippet, lead_paragraph, abstract, print_page, source,
keywords, pub_date, type_of_material, word_count)
# 'headline' was a list of two variables 'main' and 'kicker'
# so I just converted it to contain the main headline
df$headline <- df$headline$main
birthday <- df %>%
filter(grepl("1872-04-19",pub_date))
datatable(birthday)
df <- content$response$docs %>%
select(headline, snippet, lead_paragraph, abstract, print_page,
keywords, pub_date, type_of_material, word_count)
# 'headline' was a list of two variables 'main' and 'kicker'
# so I just converted it to contain the main headline
df$headline <- df$headline$main
birthday <- df %>%
filter(grepl("1872-04-19",pub_date))
datatable(birthday)
df$pub_date <- substr(df$pub_date, 1, 10)
birthday <- df %>%
filter(grepl("1872-04-19",pub_date))
datatable(birthday)
birthday$headline
hist(birthday$type_of_material)
hist(birthday ~ type_of_material)
barplot(birthday$type_of_material)
geom_bar(birthday$type_of_material)
geom_bar(birthday, aes(type_of_material))
geom_bar(birthday$type_of_material)
ggplot(birthday$type_of_material) + geom_bar()
ggplot(as.factor(birthday$type_of_material)) + geom_bar()
summary(birthday$type_of_material)
table(birthday$type_of_material)
filter(birthday$headline, type_of_material == 'Front Page')
birthday <- data.frame(birthday)
frontpage <- filter(birthday, grepl('Front Page', type_of_material))
frontpage$headline
articles <- filter(birthday, grepl('Article', type_of_material))
articles$headline
articles <- filter(birthday, grepl('Article', type_of_material))
articles$headline
filter(articles, grel("Cooper", headline))
filter(articles, grepl("Cooper", headline))
# load data
library(tidyverse)
food <- read.csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/food-world-cup/food-world-cup-data.csv")
# load data
library(tidyverse)
food <- read.csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/food-world-cup/food-world-cup-data.csv")
# load data
library(tidyverse)
food <- read_csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/food-world-cup/food-world-cup-data.csv")
str(food)
glimpse(food)
View(food)
# load data
library(tidyverse)
food <- read_csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/food-world-cup/food-world-cup-data.csv", fileEncoding="latin1")
# load data
library(tidyverse)
food <- read_csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/food-world-cup/food-world-cup-data.csv", local = locale(encoding = "latin1"))
glimpse(food)
glimpse(food)
data_frame(food)
summary(food)
# load data
library(tidyverse)
food <- read_csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/food-world-cup/food-world-cup-data.csv", locale = locale(encoding = "latin1"), na = c("", "N/A"))
summary(food)
summary(food)
# load data
library(tidyverse)
food <- read.csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/food-world-cup/food-world-cup-data.csv", locale = locale(encoding = "latin1"), na = c("", "N/A"))
spec(food)
# load data
library(tidyverse)
food2 <- read.csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/food-world-cup/food-world-cup-data.csv", encoding = "latin1", na = c("", "N/A"))
food <- read.csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/food-world-cup/food-world-cup-data.csv", encoding = "latin1", na = c("", "N/A"))
summarise(food)
summary(food)
# load data
library(tidyverse)
food <- read.csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/food-world-cup/food-world-cup-data.csv", encoding = "latin1", na = c("", "N/A"))
summary(food)
summary(food)
table(food)
dim(food)
options(scipen = 999)
dim(food)
food$RespondentID
food$tried <- count(food[,4:43])
food$tried <- sum( !is.na( food[,4:43] ) )
food$tried <- rowsum( !is.na( food[,4:43] ) )
food$tried <- rowsum(as.numeric(!is.na( food[,4:43] )))
food$tried <- rowsum( !is.na( food[,4:43] ) )
food$tried <- rowSums( !is.na( food[,4:43] ) )
# Get rid of extra text in cuisine rating column names
colnames(food)
# Get rid of extra text in cuisine rating column names
colnames(food[,4:43]) <- sub("Please.rate.how.much.you.like.the.traditional.cuisine.of.", "", colnames(food[,4:43]),)
# Get rid of extra text in cuisine rating column names
colnames(food[,4:43]) <- sub("Please.rate.how.much.you.like.the.traditional.cuisine.of.", "", colnames(food[,4:43]))
# Get rid of extra text in cuisine rating column names
sub("Please.rate.how.much.you.like.the.traditional.cuisine.of.", "", colnames(food[,4:43]))
# Get rid of extra text in cuisine rating column names
colnames(food[,4:43]) <- sub("Please.rate.how.much.you.like.the.traditional.cuisine.of.", "", colnames(food[,4:43]))
countries <- sub("Please.rate.how.much.you.like.the.traditional.cuisine.of.", "", colnames(food[,4:43]))
colnames(food[,4:43]) <- countries
colnames(food[4:43]) <- countries
names(food[,4:43]) <- countries
countries
names(food)[,4:43] <- countries
colnames(food)[,4:43] <- countries
colnames(food)[4:43] <- countries
# Add column for the number of cuisines a respondent has tried
food$tried <- rowSums( !is.na( food[,4:43] ) )
# Get rid of extra text in cuisine rating column names
countries <- sub("Please.rate.how.much.you.like.the.traditional.cuisine.of.", "", colnames(food[,4:43]))
colnames(food)[4:43] <- countries
# Remove NA's in the Gender and/or Income columns
food2 <- complete.cases(food[, c(44,46)])
# Add column for the number of cuisines a respondent has tried
food$tried <- rowSums( !is.na( food[,4:43] ) )
# Get rid of extra text in cuisine rating column names
countries <- sub("Please.rate.how.much.you.like.the.traditional.cuisine.of.", "", colnames(food[,4:43]))
colnames(food)[4:43] <- countries
# Remove NA's in the Gender and/or Income columns
food2 <- food[complete.cases(food[, c(44,46)]), ]
View(food2)
# Remove NA's in the Gender and/or Household.Income columns and unneeded columns
food2 <- food[complete.cases(food[, c(44,46)]), c(1,44,46,49)]
# Load data from IPEDS.
library(ipeds)
dim(food2)
View(food)
library(psych)
describeBy(food2)
table(food2$Gender)
table(food2$Household.Income)
table(food2$tried)
table(food2$Gender)
table(food2$Household.Income)
describeBy(food2$tried)
table(food2$Gender)
table(food2$Household.Income)
describe(food2$tried)
table(food2$Gender)
prop.table(table(food2$Gender))
table(food2$Household.Income)
prop.table(table(food2$Household.Income))
describe(food2$tried)
table(food2$Gender)
prop.table(table(food2$Gender))
table(food2$Household.Income)
prop.table(table(food2$Household.Income))
describe(food2$tried)
levels(food$Household.Income) <- c("$0 - $24,999","$25,000 - $49,999","$50,000 - $99,999","$100,000 - $149,999","$150,000+")
# Add column for the number of cuisines a respondent has tried
food$tried <- rowSums( !is.na( food[,4:43] ) )
# Get rid of extra text in cuisine rating column names
countries <- sub("Please.rate.how.much.you.like.the.traditional.cuisine.of.", "", colnames(food[,4:43]))
colnames(food)[4:43] <- countries
# Set Factor Levels for Household.Income
levels(food$Household.Income) <- c("$0 - $24,999","$25,000 - $49,999","$50,000 - $99,999","$100,000 - $149,999","$150,000+")
# Remove NA's in the Gender and/or Household.Income columns and unneeded columns
food2 <- food[complete.cases(food[, c(44,46)]), c(1,44,46,49)]
table(food2$Gender)
prop.table(table(food2$Gender))
table(food2$Household.Income)
prop.table(table(food2$Household.Income))
describe(food2$tried)
hist(food2$tried)
hist(food2$tried)
ggplot(food2, aes(x=tried)) + geom_histogram()
ggplot(food2, aes(x=tried), binwidth=5) + geom_histogram()
hist(food2$tried)
ggplot(food2, aes(x=tried)) + geom_histogram(binwidth=5)
ggplot(food2, aes(x=Household.Income)) + geom_bar()
men <- subset(food2,Gender == "Male")
View(men)
men <- subset(food2,Gender == "Male")
ggplot(men, aes(x=Household.Income)) + geom_bar()
women <- subset(food2,Gender == "Male")
ggplot(women, aes(x=Household.Income)) + geom_bar()
men <- subset(food2,Gender == "Male")
table(men$Household.Income)
ggplot(men, aes(x=Household.Income)) + geom_bar()
women <- subset(food2,Gender == "Male")
table(women$Household.Income)
ggplot(women, aes(x=Household.Income)) + geom_bar()
View(women)
women <- subset(food2,Gender == "Female")
table(women$Household.Income)
ggplot(women, aes(x=Household.Income)) + geom_bar()
# load data from fivethirtyeight.com
library(tidyverse)
library(psych)
food <- read.csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/food-world-cup/food-world-cup-data.csv", encoding = "latin1", na = c("", "N/A"))
options(scipen = 999)
dim(food)
# Add column for the number of cuisines a respondent has tried
food$tried <- rowSums( !is.na( food[,4:43] ) )
# Get rid of extra text in cuisine rating column names
countries <- sub("Please.rate.how.much.you.like.the.traditional.cuisine.of.", "", colnames(food[,4:43]))
colnames(food)[4:43] <- countries
# Set Factor Levels for Household.Income
levels(food$Household.Income) <- c("$0 - $24,999","$25,000 - $49,999","$50,000 - $99,999","$100,000 - $149,999","$150,000+")
# Remove NA's in the Gender and/or Household.Income columns and unneeded columns
food2 <- food[complete.cases(food[, c(44,46)]), c(1,44,46,49)]
setwd("~/GitHub/DATA_606_Statistics_and_Probability")
library(DATA606)
start("Lab7")
startLab("Lab7")
load("more/mlb11.RData")
qqplot(mlb11$runs, mlb11$at_bats)
?qqplot
qqplot(mlb11$runs, mlb11$at_bats)
qqline(mlb11$runs, mlb11$at_bats)
qqplot(mlb11$runs, mlb11$at_bats)
qqline(mlb11$at_bats)
qqplot(mlb11$runs, mlb11$at_bats)
cor(mlb11$runs, mlb11$at_bats)
qqplot(mlb11$runs, mlb11$at_bats)
qqline(mlb11$runs, mlb11$at_bats)
qqplot(mlb11$runs, mlb11$at_bats)
qqline(mlb11$runs ~ mlb11$at_bats)
qqplot(mlb11$runs, mlb11$at_bats)
qqline(mlb11$at_bats)
qqplot(mlb11$runs, mlb11$at_bats)
qqline(mlb11$at_bats, datax = FALSE)
qqplot(mlb11$at_bats, mlb11$runs)
plot_ss(x = mlb11$at_bats, y = mlb11$runs)
plot_ss(x = mlb11$at_bats, y = mlb11$runs, showSquares = TRUE)
View(plot_ss)
plot_ss(x = mlb11$at_bats, y = mlb11$runs, showSquares = TRUE)
m1 <- lm(runs ~ at_bats, data = mlb11)
summary(m1)
m1 <- lm(runs ~ at_bats, data = mlb11)
m1
m1 <- lm(runs ~ at_bats, data = mlb11)
m1 <- lm(runs ~ homeruns, data = mlb11)
summary(m1)
plot(mlb11$runs ~ mlb11$at_bats)
abline(m1)
