p <- 0.09
q <- 1 - p
themean <- n * p
thestd <- n * p * q
themean
thestd
mu <- 151 * .09
mu
v <- mu * (1-.09)
s <- sqrt(v)
round(s, 2)
(13.59 - 11)/s
round(pnorm(11.5, mean=mu, sd=s)-pnorm(-0.5, mean=mu, sd=s),4)
n <- 151
p <- 0.09
q <- 1 - p
themean <- n * p
thestd <- n * p * q
themean
thestd
mu <- 151 * .09
mu
v <- mu * (1-.09)
s <- sqrt(v)
round(s, 2)
(13.59 - 11)/s
round(pnorm(11.5, mean=mu, sd=s)-pnorm(-0.5, mean=mu, sd=s),4)
n <- 151
p <- 0.09
q <- 1 - p
themean <- n * p
thestd <- sqrt(n * p * q)
themean
thestd
mu <- 151 * .09
mu
v <- mu * (1-.09)
s <- sqrt(v)
round(s, 2)
(13.59 - 11)/s
round(pnorm(10.5, mean=mu, sd=s)-pnorm(-0.5, mean=mu, sd=s),4)
mu <- 151 * .09
mu
v <- mu * (1-.09)
s <- sqrt(v)
round(s, 2)
(13.59 - 11)/s
round(pnorm(10.5, mean=mu, sd=s)-pnorm(-0.5, mean=mu, sd=s),4)
mu <- 151 * .09
mu
v <- mu * (1-.09)
s <- sqrt(v)
round(s, 2)
(11-13.59)/s
round(pnorm(10.5, mean=mu, sd=s)-pnorm(-0.5, mean=mu, sd=s),4)
mu <- 151 * .09
v <- mu * (1-.09)
s <- sqrt(v)
z = (11-13.59)/s
z
round(pnorm(10.5, mean=mu, sd=s)-pnorm(-0.5, mean=mu, sd=s),4)
mu <- 151 * .09
v <- mu * (1-.09)
s <- sqrt(v)
z = (11-13.59)/s
z
round(pnorm(10.5, mean=mu, sd=s)-pnorm(-0.5, mean=mu, sd=s),4)
151*.09
151*(1-.09)
mu <- 151 * .09
v <- mu * (1-.09)
s <- sqrt(v)
z = (11-13.59)/s
z
round(pnorm(10.5, mean=mu, sd=s),4)
151*.09
151*(1-.09)
mu <- 151 * .09
v <- mu * (1-.09)
s <- sqrt(v)
z = (11-13.59)/s
z
round(pnorm(10.5, mean=mu, sd=s),4)
mu <- 151 * .09
v <- mu * (1-.09)
s <- sqrt(v)
z = (11-13.59)/s
round(z,2) # when I look up this z score I get a probabiliy of .
round(pnorm(10.5, mean=mu, sd=s),4)
mu <- 151 * .09
v <- mu * (1-.09)
s <- sqrt(v)
z = (11-13.59)/s
round(z,2) # when I look up this z score I get a probabiliy of .23
# not sure why the formula below does not give me the same...
round(pnorm(11, mean=mu, sd=s),4)
mu <- 151 * .09
v <- mu * (1-.09)
s <- sqrt(v)
z = (11-13.59)/s
round(z,2) # when I look up this z score I get a probabiliy of .23
# not sure why the formula below does not give me the same...
round(pnorm(10.5, mean=mu, sd=s),4)
When I do this it comes out spot on, but the textbook says to go .5 over your highest number and .5 below your lowest when you are using the normal distribution to approximate the binomial...
mu <- 151 * .09
v <- mu * (1-.09)
s <- sqrt(v)
z = (11-13.59)/s
round(z,2) # when I look up this z score I get a probabiliy of .23
# not sure why the formula below does not give me the same...
round(pnorm(10.5, mean=mu, sd=s),4)
#When I do this it comes out spot on, but the textbook says to go .5 over your highest number and .5 below your lowest when you are using the normal distribution to approximate the binomial...
round(pnorm(11, mean=mu, sd=s),4)
?getsem
se = 7/sqrt(147)
round(pnorm(48.83, mean=48, sd=se, lower.tail=FALSE),4)
se = 7/sqrt(147)
se
round(pnorm(48.83, mean=48, sd=se, lower.tail=FALSE),4)
se = 7/sqrt(147)
round(pnorm(48.83, mean=48, sd=se, lower.tail=FALSE),4)
se = 10/sqrt(68)
round(pnorm(93.54, mean=91, sd=se, lower.tail=FALSE),4)
se = .07*(1-.07)/540
round(pnorm(.10, mean=7, sd=se)-pnorm(.04, mean=7, sd=se),4)
se = sqrt(.07*(1-.07)/540)
round(pnorm(.10, mean=7, sd=se)-pnorm(.04, mean=7, sd=se),4)
se = sqrt(.07*(1-.07)/540)
round(pnorm(.10, mean=7, sd=se)-pnorm(.04, mean=7, sd=se),4)
se = sqrt(.07*(1-.07)/540)
se
round(pnorm(.10, mean=7, sd=se)-pnorm(.04, mean=7, sd=se),4)
se = sqrt(.07*(1-.07)/540)
se
round(pnorm(.10, mean=.07, sd=se)-pnorm(.04, mean=.07, sd=se),4)
# Sampling Distribution of P
se = sqrt(.23*(1-.23)/602)
se
round(pnorm(.27, mean=.23, sd=se, lower.tail=FALSE)+pnorm(.19, mean=.23, sd=se),4)
# Sampling Distribution of P
se = sqrt(.07*(1-.07)/540)
round(pnorm(.10, mean=.07, sd=se)-pnorm(.04, mean=.07, sd=se),4)
# Sampling Distribution of P
se = sqrt(.23*(1-.23)/602)
round(pnorm(.27, mean=.23, sd=se, lower.tail=FALSE)+pnorm(.19, mean=.23, sd=se),4)
# Sampling Distribution of P
se = sqrt(.23*(1-.23)/602)
se
round(pnorm(.27, mean=.23, sd=se, lower.tail=FALSE)+pnorm(.19, mean=.23, sd=se),4)
# Sampling Distribution of P
se = sqrt(.23*(1-.23)/602)
round(pnorm(.27, mean=.23, sd=se, lower.tail=FALSE)+pnorm(.19, mean=.23, sd=se),4)
xbar <- 3.9
s <- 0.8
n <- 208
se <- s/sqrt(n)
t <- abs(qt(.2/2, n-1))
t
lower <- round(xbar - t*se, 1)
upper <- round(xbar + t*se, 1)
xbar <- 3.9
s <- 0.8
n <- 208
se <- s/sqrt(n)
# looked up the 80% interval on a z-table 2.33
lower <- round(xbar - 2.33*se, 1)
upper <- round(xbar + 2.33*se, 1)
xbar <- 3.9
s <- 0.8
n <- 208
se <- s/sqrt(n)
# looked up the 80% interval on a z-table 2.33
lower <- round(xbar - 2.33*se, 1)
upper <- round(xbar + 2.33*se, 1)
lower
upper
xbar <- 3.9
s <- 0.8
n <- 208
se <- s/sqrt(n)
# looked up the 80% interval on a z-table 2.33
lr <- round(xbar - 2.33*se, 1)
ur <- round(xbar + 2.33*se, 1)
lr
ur
xbar <- 3.9
s <- 0.8
n <- 208
se <- s/sqrt(n)
# looked up the 80% interval on a z-table 1.28
lr <- round(xbar - 2.33*se, 1)
ur <- round(xbar + 2.33*se, 1)
lr
ur
xbar <- 3.9
s <- 0.8
n <- 208
se <- s/sqrt(n)
# looked up the 80% interval on a z-table 1.28
lr <- round(xbar - 1.28*se, 1)
ur <- round(xbar + 1.28*se, 1)
lr
ur
xbar <- 3.9
s <- 0.8
n <- 208
se <- s/sqrt(n)
# looked up the 80% interval on a z-table 1.28
lr <- round(xbar - 1.28*se, 1)
ur <- round(xbar + 1.28*se, 1)
lr
ur
xbar <- 3.9
s <- 0.8
n <- 208
se <- s/sqrt(n)
# looked up the 80% interval on a z-table 1.28
lr <- round(xbar - 2.33*se, 1)
ur <- round(xbar + 2.33*se, 1)
lr
ur
xbar <- 3.9
s <- 0.8
n <- 208
se <- s/sqrt(n)
# looked up the 80% interval on a z-table 1.28
lr <- round(xbar - 1.28*se, 1)
ur <- round(xbar + 1.28*se, 1)
lr
ur
xbar <- 3.9
s <- 0.8
n <- 208
se <- s/sqrt(n)
# looked up the 80% interval on a z-table 1.28
lr <- round(xbar - 1.28*se, 1)
ur <- round(xbar + 1.28*se, 1)
lr
ur
lb <- round(xbar - 2.33*se, 1)
ub <- round(xbar + 2.33*se, 1)
lb
ub
xbar <- 3.9
s <- 0.8
n <- 208
se <- s/sqrt(n)
# looked up the 80% interval on a z-table 1.28
lr <- round(xbar - 1.28*se, 10)
ur <- round(xbar + 1.28*se, 10)
lr
ur
lb <- round(xbar - 2.33*se, 10)
ub <- round(xbar + 2.33*se, 10)
lb
ub
xbar <- 3.9
s <- 0.8
n <- 208
se <- s/sqrt(n)
# looked up the 80% interval on a z-table 1.28
lb <- round(xbar - 1.28*se, 10)
ub <- round(xbar + 1.28*se, 10)
lb
ub
xbar <- 3.9
s <- 0.8
n <- 208
se <- s/sqrt(n)
# looked up the 80% interval on a z-table 1.28
lb <- round(xbar - 1.28*se, 1)
ub <- round(xbar + 1.28*se, 1)
lb
ub
xbar <- 16.6
s <- 11
n <- 7472
se <- s/sqrt(n)
# looked up the 98% interval on a z-table 2.33 (1% to either tail)
lb <- round(xbar - 2.33*se, 1)
ub <- round(xbar + 2.33*se, 1)
lb
ub
xbar <- 16.6
s <- 11
n <- 7472
se <- s/sqrt(n)
# looked up the 98% interval on a z-table 2.33 (1% cut from either tail)
lb <- round(xbar - 2.33*se, 1)
ub <- round(xbar + 2.33*se, 1)
lb
ub
m <- sum(383.6, 347.1, 371.9, 347.6, 325.8, 337)
m
m <- sum(383.6, 347.1, 371.9, 347.6, 325.8, 337)/6
m
m <- round(sum(383.6, 347.1, 371.9, 347.6, 325.8, 337)/6, 2)
m
s <- round(sd(383.6, 347.1, 371.9, 347.6, 325.8, 337), 2)
s <- round(sd(c(383.6, 347.1, 371.9, 347.6, 325.8, 337)), 2)
s <- round(sd(c(383.6, 347.1, 371.9, 347.6, 325.8, 337)), 2)
s
n <- 6
se <- s/sqrt(n)
lb <- round(m - 2.015*se, 1)
ub <- round(m + 2.015*se, 1)
lb
ub
n <- 6
se <- s/sqrt(n)
lb <- round(m - 2.015*se, 2)
ub <- round(m + 2.015*se, 2)
lb
ub
qt(.05, 26, ncp, lower.tail = TRUE)
qt(.05, 26, lower.tail = TRUE)
qt(.05, 5, lower.tail = TRUE)
t <- qt(.05, 5, lower.tail = FALSE)
t <- qt(.05, 5, lower.tail = FALSE)
t <- qt(.05, 5, lower.tail = FALSE)
t
n <- 6
se <- s/sqrt(n)
lb <- round(m - t*se, 2)
ub <- round(m + t*se, 2)
lb
ub
t <- qt(.10, 15, lower.tail = FALSE)
t
t <- qt(.10, 15, lower.tail = FALSE)
round(t, 3)
t <- qt(.05, 5, lower.tail = FALSE)
round(t, 3)
m <- 46.4
s <- 2.45
n <- 16
se <- s/sqrt(n)
lb <- round(m - t*se, 1)
ub <- round(m + t*se, 1)
lb
ub
m <- 8
s <- 1.9
pt(1:5, df = 1)
z = qnorm(.995)
m <- 8
s <- 1.9
#(z*sqrt(p(1-p)))/n)
z = qnorm(.995)
z
m <- 8
s <- 1.9
#(z*sqrt(p(1-p)))/n)
install.packages("tidyverse")
setwd("~/GitHub/DATA_606_Statistics_and_Probability/Lab0")
devtools::install_github("seankross/lego")
library(lego)
data("legosets")
table(legosets$Availability, legosets$Packaging, useNA='ifany')
prop.table(table(legosets$Availability))
install.packages("psych")
devtools::install_github("seankross/lego")
library(lego)
data(legosets)
table(legosets$Availability, useNA='ifany')
table(legosets$Availability, legosets$Packaging, useNA='ifany')
prop.table(table(legosets$Availability))
barplot(table(legosets$Availability), las=3)
barplot(prop.table(table(legosets$Availability)), las=3)
barplot(table(legosets$Availability), las=3)
barplot(prop.table(table(legosets$Availability)), las=3)
library(vcd)
install.packages("vcd")
library(vcd)
mosaic(HairEyeColor, shade=TRUE, legend=TRUE)
mean(legosets$Pieces, na.rm=TRUE)
median(legosets$Pieces, na.rm=TRUE)
var(legosets$Pieces, na.rm=TRUE)
sqrt(var(legosets$Pieces, na.rm=TRUE))
sd(legosets$Pieces, na.rm=TRUE)
fivenum(legosets$Pieces, na.rm=TRUE)
IQR(legosets$Pieces, na.rm=TRUE)
summary(legosets$Pieces)
library(psych)
describe(legosets$Pieces, skew=FALSE)
describeBy(legosets$Pieces, group = legosets$Availability, skew=FALSE, mat=TRUE)
describeBy(legosets$Pieces, group = legosets$Availability, skew=FALSE, mat=TRUE)
library(psych)
describe(legosets$Pieces, skew=FALSE)
describeBy(legosets$Pieces, group = legosets$Availability, skew=FALSE, mat=TRUE)
stripchart(legosets$Pieces)
par.orig <- par(mar=c(1,10,1,1))
stripchart(legosets$Pieces ~ legosets$Availability, las=1)
hist(legosets$Pieces)
hist(log(legosets$Pieces))
plot(density(legosets$Pieces, na.rm=TRUE), main='Lego Pieces per Set')
boxplot(legosets$Pieces)
plot(legosets$Pieces, legosets$USD_MSRP)
legosets[which(legosets$USD_MSRP >= 400),]
legosets[which(legosets$Pieces >= 4000),]
plot(legosets$Pieces, legosets$USD_MSRP)
bigAndExpensive <- legosets[which(legosets$Pieces >= 4000 | legosets$USD_MSRP >= 400),]
text(bigAndExpensive$Pieces, bigAndExpensive$USD_MSRP, labels=bigAndExpensive$Name)
source("more/arbuthnot.R")
library('DATA606')          # Load the package
vignette(package='DATA606') # Lists vignettes in the DATA606 package
vignette('os3')             # Loads a PDF of the OpenIntro Statistics book
data(package='DATA606')     # Lists data available in the package
getLabs()                   # Returns a list of the available labs
viewLab('Lab0')             # Opens Lab0 in the default web browser
startLab('Lab0')            # Starts Lab0 (copies to getwd()), opens the Rmd file
shiny_demo()                # Lists available Shiny apps
library('DATA606')          # Load the package
vignette(package='DATA606') # Lists vignettes in the DATA606 package
vignette('os3')             # Loads a PDF of the OpenIntro Statistics book
data(package='DATA606')     # Lists data available in the package
getLabs()                   # Returns a list of the available labs
shiny_demo()                # Lists available Shiny apps
vignette(package='DATA606')
arbuthnot
dim(arbuthnot)
names(arbuthnot)
arbuthnot$girls
arbuthnot$girls
plot(x = arbuthnot$year, y = arbuthnot$boys / (arbuthnot$boys + arbuthnot$girls))
source("more/present.R")
dim(present)
names(present)
present$year
dim(present)
names(present)
# years included in the data set
present$year
# dimensions of the data frame
dim(present)
# variable names
names(present)
# years included in the data set
present$year
# dimensions of the data frame
dim(present)
# variable names
names(present)
plot(present$boys/present$girls)
plot(present$year, present$boys/present$girls)
ramge(arbuthnot$year)
range(arbuthnot$year)
range(present$year)
A <- range(arbuthnot$year)
P <- range(present$year)
A <- range(arbuthnot$year)
P <- range(present$year)
A
P
A[2] - A[1]
A <- range(arbuthnot$year)
P <- range(present$year)
A
P
A[2] - A[1]
P[2] - P[1]
A <- range(arbuthnot$year)
P <- range(present$year)
A
P
A[2] - A[1] + 1
P[2] - P[1] + 1
A <- range(arbuthnot$year)
P <- range(present$year)
A
P
A[2] - A[1] + 1
P[2] - P[1] + 1
82/63
A <- range(arbuthnot$year)
P <- range(present$year)
A
P
a <- A[2] - A[1] + 1
p <- P[2] - P[1] + 1
a
p
a/p
totals = present$boys + present$girls
max(totals)
present$totals <- present$boys + present$girls
present$totals <- present$boys + present$girls
str(present)
present$totals <- present$boys + present$girls
str(present)
present[which.max(present$totals)]
present$totals <- present$boys + present$girls
str(present)
present[which.max(present$totals),]
present$totals <- present$boys + present$girls
present[which.max(present$totals),]
present$totals <- present$boys + present$girls
present[which.max(present$totals),]
max(present$totals)
present$totals <- present$boys + present$girls
present[which.max(present$totals),]
A <- range(arbuthnot$year)
P <- range(present$year)
A
P
a <- A[2] - A[1] + 1
p <- P[2] - P[1] + 1
a
p
a/p
max(present$boys + present$girls)
max(arbuthnot$boys + arbuthnot$girls)
